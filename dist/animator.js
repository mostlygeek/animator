// Generated by CoffeeScript 1.3.3

/*
# v0.0.3
# Copyright Futdut Games, Inc 2012
*/


(function() {
  var Animation, Animator, _ref;

  if ((_ref = window.ready) == null) {
    window.ready = function(fn) {
      var check, fire;
      fire = function() {
        if (!window.ready.fired) {
          window.ready.fired = true;
          return fn();
        }
      };
      if (document.readyState === "complete") {
        return fire();
      }
      if (document.addEventListener) {
        document.addEventListener("DOMContentLoaded", fire, false);
        return window.addEventListener("load", fire, false);
      } else if (document.attachEvent) {
        check = function() {
          try {
            document.documentElement.doScroll("left");
          } catch (e) {
            setTimeout(check, 50);
            return;
          }
          return fire();
        };
        document.attachEvent("onreadystatechange", fire);
        window.attachEvent("onload", fire);
        if (document.documentElement && document.documentElement.doScroll && !window.frameElement) {
          return check();
        }
      }
    };
  }

  (function() {
    var lastTime, vendor, vendors, _i, _len;
    if (window.requestAnimationFrame) {
      return;
    }
    lastTime = 0;
    vendors = ["ms", "moz", "webkit", "o"];
    for (_i = 0, _len = vendors.length; _i < _len; _i++) {
      vendor = vendors[_i];
      if (window.requestAnimationFrame != null) {
        break;
      }
      window.requestAnimationFrame = window["" + vendor + "RequestAnimationFrame"];
      window.cancelAnimationFrame = window["" + vendor + "CancelAnimationFrame"] || window["" + vendor + "CancelRequestAnimationFrame"];
    }
    if (!(window.requestAnimationFrame != null)) {
      window.requestAnimationFrame = function(callback, element) {
        var curTime, id, timeToCall;
        curTime = new Date().getTime();
        timeToCall = Math.max(0, 16 - (curTime - lastTime));
        id = window.setTimeout(function() {
          return callback(curTime + timeToCall);
        }, timeToCall);
        lastTime = curTime + timeToCall;
        return id;
      };
    }
    if (!window.cancelAnimationFrame) {
      window.cancelAnimationFrame = function(id) {
        return clearTimeout(id);
      };
    }
    return null;
  })();

  Animation = (function() {

    Animation.prototype.curFrame = 0;

    Animation.prototype.lastFrame = 0;

    Animation.prototype.ready = false;

    function Animation(indexURL, spriteURL, canvasContext, time, offsetX, offsetY) {
      var img, jXHR,
        _this = this;
      this.canvasContext = canvasContext;
      this.time = time;
      this.offsetX = offsetX;
      this.offsetY = offsetY;
      this.startTime = Date.now();
      this.lastFrame = 0;
      jXHR = new XMLHttpRequest;
      jXHR.open("GET", indexURL, true);
      jXHR.send(null);
      jXHR.onreadystatechange = function(event) {
        var t;
        t = event.currentTarget;
        if (t.readyState !== 4) {
          return;
        }
        _this.index = JSON.parse(t.responseText);
        if (_this.img != null) {
          return _this.ready();
        }
      };
      img = new Image;
      img.src = spriteURL;
      img.onload = function() {
        _this.img = img;
        if (_this.index != null) {
          return _this.ready();
        }
      };
    }

    Animation.prototype.onready = function(fn) {
      return this.readyFn = fn;
    };

    Animation.prototype.ready = function() {
      this.frameCount = this.index.frames.length;
      this.frameDelay = this.time * 1000 / this.frameCount;
      this.ready = true;
      if (this.readyFn != null) {
        return this.readyFn();
      }
    };

    Animation.prototype.draw = function(now) {
      var curFrame, sSize, tile, timePassed;
      if (now == null) {
        now = Date.now();
      }
      if (this.ready !== true) {
        return;
      }
      timePassed = Math.floor((now - this.startTime) / this.frameDelay);
      curFrame = timePassed % this.frameCount;
      if (curFrame === this.lastFrame) {
        return;
      }
      this.lastFrame = curFrame;
      tile = this.index.frames[curFrame];
      sSize = tile.spriteSourceSize;
      this.canvasContext.clearRect(0, 0, this.canvasContext.canvas.width, this.canvasContext.canvas.height);
      this.canvasContext.drawImage(this.img, tile.frame.x, tile.frame.y, tile.frame.w, tile.frame.h, this.offsetX + sSize.x, this.offsetY + sSize.y, tile.frame.w, tile.frame.h);
      return null;
    };

    return Animation;

  })();

  Animator = (function() {

    function Animator() {
      var animateFn,
        _this = this;
      this.queue = [];
      animateFn = function(now) {
        var animation, _i, _len, _ref1;
        _ref1 = _this.queue;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          animation = _ref1[_i];
          animation.draw(now);
        }
        return window.requestAnimationFrame(animateFn);
      };
      window.requestAnimationFrame(animateFn);
    }

    Animator.prototype.init = function() {
      var dataIndex, dataSprites, dataTime, dataX, dataY, el, elements, offsetX, offsetY, time, _i, _len, _results;
      elements = document.querySelectorAll("canvas.Animator");
      _results = [];
      for (_i = 0, _len = elements.length; _i < _len; _i++) {
        el = elements[_i];
        dataIndex = el.getAttribute("data-index");
        dataSprites = el.getAttribute("data-sprites");
        dataX = el.getAttribute("data-x");
        dataY = el.getAttribute("data-y");
        dataTime = el.getAttribute("data-time");
        time = dataTime != null ? parseFloat(dataTime) : 1.0;
        offsetX = dataX != null ? parseInt(dataX) : 0;
        offsetY = dataY != null ? parseInt(dataY) : 0;
        if ((dataIndex != null) && (dataSprites != null)) {
          _results.push(this.add(el, dataIndex, dataSprites, time, offsetX, offsetY));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Animator.prototype.add = function(element, jsonIndex, spriteImg, time, offsetX, offsetY) {
      var animation, ctx;
      if (offsetX == null) {
        offsetX = 0;
      }
      if (offsetY == null) {
        offsetY = 0;
      }
      if (element.animation != null) {
        return;
      }
      ctx = element.getContext("2d");
      animation = new Animation(jsonIndex, spriteImg, ctx, time, offsetX, offsetY);
      element.animation = animation;
      this.queue.push(animation);
      return animation;
    };

    Animator.prototype.stop = function(id) {};

    return Animator;

  })();

  window.ready(function() {
    var ani;
    ani = new Animator;
    window.Animator = ani;
    return ani.init();
  });

}).call(this);
